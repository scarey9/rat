stages:
  - precheck
  - build_containers
  - security_scan
  #- test
  #- cyber_accept
  - push_to_nexus
  #- deploy_to_itss
  #- rolling_update_itss

precheck:
  stage: precheck
  image: docker:stable-git
  allow_failure: false
  services:
  - docker:19.03.0-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - setup_docker
    - chmod +x ./.gitlab-scripts/precheck.sh
    - ./.gitlab-scripts/precheck.sh


#test:
#  stage: test
#  image: docker/compose:1.27.4
#  services:
#    - docker:19.03.0-dind
#  variables:
#    DOCKER_HOST: tcp://localhost:2375
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#  script:
#    - docker-compose up --build -d
#    - chmod +x .gitlab-scripts/rat_ready.sh; .gitlab-scripts/rat_ready.sh
#    - docker-compose exec -T contractdb pytest /app/tests
#    - docker-compose down
#  except:
#    - master
#    - itss



build_contractdb_container:
  stage: build_containers
  image: docker:stable-git
  allow_failure: false
  services:
  - docker:19.03.0-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - setup_docker
    - cd contractdb
    - chmod +x ../.gitlab-scripts/build_container.sh
    - ../.gitlab-scripts/build_container.sh rat
    - cd ..
  only:
    - master
    - itss

#build:
#  stage: build
#  image: docker/compose:1.27.4
#  services:
#    - docker:19.03.0-dind
#  variables:
#    DOCKER_HOST: tcp://localhost:2375
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#  script:
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#    - docker-compose build
#    - docker-compose push
#  only:
#    - master
#    - itss


#code_security:
#  stage: security_scan
#  image: docker:stable
#  allow_failure: true
#  services:
#  - docker:19.03.0-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#    SAST_DEFAULT_ANALYZERS: ""
#    SAST_ANALYZER_IMAGES: "registry.gitlab.com/gitlab-org/security-products/analyzers/brakeman:2.11.0, registry.gitlab.com/gitlab-org/security-products/analyzers/eslint:2.10.0, registry.gitlab.com/gitlab-org/security-products/analyzers/flawfinder:2.11.1, registry.gitlab.com/gitlab-org/security-products/analyzers/gosec:2.14.0, registry.gitlab.com/gitlab-org/security-products/analyzers/nodejs-scan:2.11.0, registry.gitlab.com/gitlab-org/security-products/analyzers/phpcs-security-audit:2.9.1, registry.gitlab.com/gitlab-org/security-products/analyzers/pmd-apex:2.9.0, registry.gitlab.com/gitlab-org/security-products/analyzers/secrets:3.12.0, registry.gitlab.com/gitlab-org/security-products/analyzers/security-code-scan:2.13.0, registry.gitlab.com/gitlab-org/security-products/analyzers/sobelow:2.8.0, registry.gitlab.com/gitlab-org/security-products/analyzers/spotbugs:2.13.6, registry.gitlab.com/gitlab-org/security-products/analyzers/tslint:2.4.0"
#  script:
#    - setup_docker
#    - sast
#  artifacts:
#    paths: [gl-sast-report.json]
#    reports:
#      sast: [gl-sast-report.json]
#  only:
#    - master
#    - itss

#code_quality:
#  stage: security_scan
#  image: docker:stable
#  allow_failure: true
#  services:
#  - docker:19.03.0-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#  script:
#    - setup_docker
#    - code_quality
#  artifacts:
#    paths: [gl-code-quality-report.json]
#    reports:
#      codequality: [gl-code-quality-report.json]
#  only:
#    - master
#    - itss

#dependency_scanning:
#  stage: security_scan
#  image: docker:stable
#  allow_failure: true
#  services:
#  - docker:19.03.0-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#  script:
#    - setup_docker
#    - dependency_scanning
#  artifacts:
#    paths: [gl-dependency-scanning-report.json]
#    reports:
#      dependency_scanning: [gl-dependency-scanning-report.json]
#  only:
#    - master
#    - itss

license_management:
  stage: security_scan
  image: docker:stable
  allow_failure: true
  services:
  - docker:19.03.0-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - setup_docker
    - license_management
  artifacts:
    paths: [gl-license-management-report.json]
    reports:
      license_management: [gl-license-management-report.json]
  only:
    - master
    - itss




container_security:
  stage: security_scan
  image: docker:stable
  services:
    - name: docker:19.03.0-dind
      alias: dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - setup_docker
    - chmod +x ./.gitlab-scripts/container_scanning.sh
    - ./.gitlab-scripts/container_scanning.sh contractdb
  artifacts:
    paths: [gl-container-scanning-report.json]
    reports:
      container_scanning: [gl-container-scanning-report.json]
  only:
    - master
    - itss

nexusIQeval:
  stage: security_scan
  image: $CONTAINER_REGISTRY/gitlab-nexus-iq-pipeline:master
  allow_failure: true
  script:
    - nexusIQeval
  artifacts:
    name: "policy-eval-$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - $CI_PROJECT_NAME-policy-eval-report.html
  only:
    - master
    - itss


#sonarqube:
#    stage: security_scan
#    allow_failure: true
#    script:
#      - sonarqube
#    image:
#      name: sonarsource/sonar-scanner-cli:latest
#      entrypoint: [ "" ]
#    variables:
#      SONAR_SCANNER_OPTS: -Xmx512m
#      GIT_DEPTH: 0
#      SONAR_HOST_URL: $SONAR_URL
#    only:
#      - master
#      - itss




#cyber_accept:
#  stage: cyber_accept
#  allow_failure: false
#  image: docker:stable
#  variables:
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#  script:
#    - cyber_accept
#  when: manual
#  only:
#    - master




push_to_nexus:
  stage: push_to_nexus
  image: docker:stable-git
  services:
    - name: docker:19.03.0-dind
      alias: dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - setup_docker
    - chmod +x ./.gitlab-scripts/push_to_nexus.sh
    - ./.gitlab-scripts/push_to_nexus.sh rat
  only:
    - master
    - itss




#deploy_contractdb_to_itss:
#  stage: deploy_to_itss
#  image: docker:stable-git
#  services:
#    - name: docker:19.03.0-dind
#      alias: dind
#  variables:
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#  script:
#    - setup_docker
#    - chmod +x ./.gitlab-scripts/deploy_server_to_itss.sh
#    - ./.gitlab-scripts/deploy_server_to_itss.sh rat
#  only:
#    - itss
#
#rolling_update_itss:
#  stage: rolling_update_itss
#  image: docker:stable-git
#  services:
#    - name: docker:19.03.0-dind
#  variables:
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#  script:
#    - setup_docker
#    - chmod +x ./.gitlab-scripts/rolling_update_itss.sh
#    - ./.gitlab-scripts/rolling_update_itss.sh
#  only:
#    - itss
#


.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable" for Security Products
  export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')



  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

    function nexusIQeval() {
      apk add --no-cache python3 && \
        python3 -m ensurepip && \
        rm -r /usr/lib/python*/ensurepip && \
        pip3 install --upgrade pip setuptools && \
          if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
          if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
          rm -r /root/.cache
      pip install pipreqs
      pipreqs ./
      /sonatype/evaluate -i $CI_PROJECT_NAME -t release ./
  }

    function sonarqube() {
        set -euxo pipefail
        sonar-scanner \
        -Dsonar.host.url=$SONAR_URL \
        -Dsonar.login=$SONAR_GITLAB_AUTH_TOKEN \
        -Dsonar.qualitygate.wait=true \
        -Dsonar.projectKey=$CI_PROJECT_NAME"_"$CI_COMMIT_REF_NAME \
        -Dsonar.exclusions=*.sh,datacall/tests/**/*,datacall/static/**/*,datacall/data/**/*,datacall/templates/**/*,contractdb/tests/**/*,contractdb/static/**/*,contractdb/data/**/*,contractdb/templates/**/* \
        -Dsonar.sources="."
    }

  function code_quality() {
    docker run --env SOURCE_CODE="$PWD" \
               --volume "$PWD":/code \
               --volume /var/run/docker.sock:/var/run/docker.sock \
               "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  }

  function license_management() {
    if echo $GITLAB_FEATURES |grep license_management > /dev/null ; then
      # Extract "MAJOR.MINOR" from CI_SERVER_VERSION and generate "MAJOR-MINOR-stable"
      LICENSE_MANAGEMENT_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')

      docker run --volume "$PWD:/code" \
                 "registry.gitlab.com/gitlab-org/security-products/license-management:$LICENSE_MANAGEMENT_VERSION" analyze /code

    else
      echo "License management is not available in your subscription"
    fi
  }

  function sast() {
    case "$CI_SERVER_VERSION" in
      *-ee)

        # Deprecation notice for CONFIDENCE_LEVEL variable
        if [ -z "$SAST_CONFIDENCE_LEVEL" -a "$CONFIDENCE_LEVEL" ]; then
          SAST_CONFIDENCE_LEVEL="$CONFIDENCE_LEVEL"
          echo "WARNING: CONFIDENCE_LEVEL is deprecated and MUST be replaced with SAST_CONFIDENCE_LEVEL"
        fi

        docker run --env SAST_CONFIDENCE_LEVEL="${SAST_CONFIDENCE_LEVEL:-3}" \
                   --volume "$PWD:/code" \
                   --volume /var/run/docker.sock:/var/run/docker.sock \
                   "registry.gitlab.com/gitlab-org/security-products/sast:$SP_VERSION" /app/bin/run /code
        ;;
      *)
        echo "GitLab EE is required"
        ;;
    esac
  }

  function dependency_scanning() {
    case "$CI_SERVER_VERSION" in
      *-ee)
        docker run --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}" \
                   --volume "$PWD:/code" \
                   --volume /var/run/docker.sock:/var/run/docker.sock \
                   "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
        ;;
      *)
        echo "GitLab EE is required"
        ;;
    esac
  }

    function container_scanning() {

        if [[ -n "$CI_REGISTRY_USER" ]]; then
          echo "Logging to GitLab Container Registry with CI credentials..."
          docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
          echo ""
        fi
        export DOCKER_HOST='tcp://dind:2375'
        docker run -d --name db --restart on-failure arminc/clair-db:latest
        docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:v2.0.1
        apk add -U wget ca-certificates
        docker pull registry.master.forcenex.us/gap/j8rad/cisor/datacall:${TAG}
        wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
        mv clair-scanner_linux_amd64 clair-scanner
        chmod +x clair-scanner
        touch clair-whitelist.yml
        retries=0
        echo "Waiting for clair daemon to start"
        while( ! wget -T 10 -q -O /dev/null http://dind:6060/v1/namespaces && ps -a && netstat -punta ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
        ./clair-scanner -c http://dind:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml registry.master.forcenex.us/gap/j8rad/cisor/datacall:${TAG} || true


      }


    function notify_cyber() {
        apk --no-cache add curl
        apk --no-cache add openssl
        commitdate=`date +%-m.%-d.%-y`
        curl -X POST -H 'Content-Type: application/json' --data '{"username":"Wintermute","icon_emoji":":necromancer:","text":"Attention!","attachments":[{"title":"SECDEVOPS Dashboard","title_link":"'"$CI_PROJECT_URL"'/security/dashboard","text":"'"$GITLAB_USER_NAME"' committed to the '"$CI_PROJECT_NAME"' project. Here is a link to the pipeline for that commit:'"$CI_PIPELINE_URL"'","color":"#764FA5"}]}' https://rocketchat.forcenex.us/hooks/Myn3fABoyJcXuWjWu/$rocketchattoken
    }

    function cyber_accept() {
        echo "$GITLAB_USER_NAME accepted this scan on behalf of Command Cyber Security"
        apk --no-cache add curl
        apk --no-cache add openssl
        commitdate=`date +%-m.%-d.%-y`
        curl -X POST -H 'Content-Type: application/json' --data '{"username":"Wintermute","icon_emoji":":necromancer:","text":"Approved For Production!","attachments":[{"title":"'"$CI_PROJECT_NAME"'","title_link":"'"$CI_PROJECT_URL"'","text":"'"$GITLAB_USER_NAME"' approved this project to go to production on behalf of Command Cyber Security","color":"#764FA5"}]}' https://rocketchat.forcenex.us/hooks/qbcWbBAD4fMrK6ofQ/pxwkjEsM4ZDYSENXAKcvP5GwfgGkttPQvWcjSatsnFx6yEcf
    }

    function build() {
        if [[ -n "$CI_REGISTRY_USER" ]]; then
          echo "Logging to GitLab Container Registry with CI credentials..."
          docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
          echo ""
        fi

        if [[ -f Dockerfile ]]; then
          echo "Building Dockerfile-based application..."
          docker build \
            --build-arg HTTP_PROXY="$HTTP_PROXY" \
            --build-arg http_proxy="$http_proxy" \
            --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
            --build-arg https_proxy="$https_proxy" \
            --build-arg FTP_PROXY="$FTP_PROXY" \
            --build-arg ftp_proxy="$ftp_proxy" \
            --build-arg NO_PROXY="$NO_PROXY" \
            --build-arg no_proxy="$no_proxy" \
            -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
        else
          echo "Building Heroku-based application using gliderlabs/herokuish docker image..."
          docker run -i \
            -e BUILDPACK_URL \
            -e HTTP_PROXY \
            -e http_proxy \
            -e HTTPS_PROXY \
            -e https_proxy \
            -e FTP_PROXY \
            -e ftp_proxy \
            -e NO_PROXY \
            -e no_proxy \
            --name="$CI_CONTAINER_NAME" -v "$(pwd):/tmp/app:ro" gliderlabs/herokuish /bin/herokuish buildpack build
          docker commit "$CI_CONTAINER_NAME" "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
          docker rm "$CI_CONTAINER_NAME" >/dev/null
          echo ""

          echo "Configuring $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG docker image..."
          docker create --expose 5000 --env PORT=5000 --name="$CI_CONTAINER_NAME" "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" /bin/herokuish procfile start web
          docker commit "$CI_CONTAINER_NAME" "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
          docker rm "$CI_CONTAINER_NAME" >/dev/null
          echo ""
        fi

        echo "Pushing to GitLab Container Registry..."
        docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
        echo ""
    }

    function push2nexus() {
        if [[ -n "$CI_REGISTRY_USER" ]]; then
            echo "Logging to GitLab Container Registry with CI credentials..."
            docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
            echo ""
        fi

        echo "Building Dockerfile-based application..."

        docker login -u $svc_acct -p $svc_pwd $CONTAINER_REGISTRY
        echo ""
        echo "Logging to GitLab Container Registry with CI credentials..."
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
        echo ""

        docker pull $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
        echo "tag it with ..."
        echo "$CI_PROJECT_NAME:$CI_COMMIT_REF_NAME"
        docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" $CONTAINER_REGISTRY"/"$CI_PROJECT_NAME":"$CI_COMMIT_REF_NAME

        docker -v
        echo "Pushing new $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME image to $CONTAINER_REGISTRY..."
        docker push $CONTAINER_REGISTRY"/"$CI_PROJECT_NAME":"$CI_COMMIT_REF_NAME
        echo ""
    }


before_script:
  - *auto_devops
